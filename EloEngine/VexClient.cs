using EloEngine.Vex.Endpoints;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection.PortableExecutable;
using System.Runtime;
using System.Text;
using System.Threading;

namespace EloEngine
{
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

    namespace Vex.Api
    {
        using System = global::System;

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial interface IEventClient
        {

            /// <remarks>
            /// Gets a List of Events
            /// </remarks>
            /// <param name="id">Filter by Event ID</param>
            /// <param name="sku">Filter by Event SKU</param>
            /// <param name="team">Filter by Teams that participated in the Event</param>
            /// <param name="season">Filter by the Season that the Event belonged to</param>
            /// <param name="start">Filter by the Start Date of the Event</param>
            /// <param name="end">Filter by the End Date of the Event</param>
            /// <param name="level">Filter by the Event Level</param>
            /// <param name="myEvents">Only show events that have at least one registered team associated with the authenticated user.</param>
            /// <param name="eventTypes">Filter by the Event Type</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedEvent> GetEventsAsync(
                IEnumerable<int> id = null,
                IEnumerable<string> sku = null,
                IEnumerable<int> team = null,
                IEnumerable<int> season = null,
                System.DateTimeOffset? start = null,
                System.DateTimeOffset? end = null,
                IEnumerable<Anonymous> level = null,
                bool? myEvents = null,
                IEnumerable<EventType> eventTypes = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a Single Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <returns>A single Event</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<Event> GetEventAsync(int id, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Teams present at a given Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="number">Filter by Team Number</param>
            /// <param name="registered">Filter by whether the Team is Registered</param>
            /// <param name="grade">Filter by the Grade of the Team</param>
            /// <param name="country">Filter by the Country of the Team</param>
            /// <param name="myTeams">Only show teams associated with the authenticated user.</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>         
            /// <returns>List of Teams</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedTeam> GetTeamsAsync(
                int id,
                IEnumerable<string> number = null,
                bool? registered = null,
                IEnumerable<Anonymous2> grade = null,
                IEnumerable<string> country = null,
                bool? myTeams = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Skills runs performed at a given Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="team">Filter by Team Number that performed the Skills run</param>
            /// <param name="type">Filter by Type of Skills run</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>         
            /// <returns>A list of Skills</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedSkill> GetSkillsAsync(
                int id,
                IEnumerable<int> team = null,
                IEnumerable<Anonymous3> type = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Awards at a given Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="team">Filter by Team Number that the Award was awarded to</param>
            /// <param name="winner">Filter by the Winner of the Award (can include people's names, etc.)</param>
            /// <returns>A list of Awards</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedAward> GetAwardsAsync(
                int id,
                IEnumerable<int> team = null,
                IEnumerable<string> winner = null,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Matches for a single Division of an Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="div">The ID of the Division</param>
            /// <param name="team">Filter to only return Matches which involved given Teams</param>
            /// <param name="round">Filter by the Round of the Match.
            /// <br/>Some typical values are shown below:
            /// <br/>- 1 - Practice
            /// <br/>- 2 - Qualification
            /// <br/>- 3 - Quarter-Finals
            /// <br/>- 4 - Semi-Finals
            /// <br/>- 5 - Finals
            /// <br/>- 6 - Round of 16
            /// <br/>- etc.</param>
            /// <param name="instance">Filter by the Instance of the Match. This is used to describe which Quarter-Final match (for example) is being played</param>
            /// <param name="matchnum">Filter by the MatchNum of the Match. This is the actual Match "number", e.g. Qualification Match, or the individual match in a Best of 3</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>         
            /// <returns>A list of Matches</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedMatch> GetDivisionMatchesAsync(
                int id,
                int div,
                IEnumerable<int> team = null,
                IEnumerable<int> round = null,
                IEnumerable<int> instance = null,
                IEnumerable<int> matchnum = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Finalist Rankings for a single Division of an Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="div">The ID of the Division</param>
            /// <param name="team">Filter to only return Rankings which involve given Teams</param>
            /// <param name="rank">Filter by the Rank</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>         
            /// <returns>A list of Rankings</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedRanking> GetDivisionFinalistRankingsAsync(
                int id,
                int div,
                IEnumerable<int> team = null,
                IEnumerable<int> rank = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Rankings for a single Division of an Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="div">The ID of the Division</param>
            /// <param name="team">Filter to only return Rankings which involve given Teams</param>
            /// <param name="rank">Filter by the Rank</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>         
            /// <returns>A list of Rankings</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedRanking> GetDivisionRankingsAsync(
                int id,
                int div,
                IEnumerable<int> team = null,
                IEnumerable<int> rank = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));


            /// <remarks>
            /// Gets a List of Events for the specified season
            /// </remarks>
            /// <param name="season">Filter by the Season that the Event belonged to</param>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<List<Event>> GetAllEventsAsync(IEnumerable<int> season, CancellationToken cancellationToken = default(CancellationToken));
            Task<List<MatchObj>> GetAllMatchesForEventAsync(int id, int div, CancellationToken cancellationToken = default(CancellationToken));
            Task<List<Team>> GetAllTeamsForEventAsync(int id, CancellationToken cancellationToken = default(CancellationToken));
        }

        public class ClientFactory
        {
            public static HttpClient GetHttpClient()
            {
                var client = new HttpClient();
                client.DefaultRequestHeaders.Accept.Add(
                    new MediaTypeWithQualityHeaderValue("application/json"));
                client.DefaultRequestHeaders.Add("Authorization", Authorization.BearerToken);
                return client;
            }
        }

        public static class Extensions
        {
            public static void AddPaging(this StringBuilder urlBuilder_, int page, int per_page)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                urlBuilder_.Append(System.Uri.EscapeDataString("per_page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per_page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");

            }

            public static void ParseRateLimit(this RateLimit rateLimit, HttpResponseMessage response_)
            {
                IEnumerable<string> values = null;
                if (response_.Headers.TryGetValues("x-ratelimit-remaining", out values))
                {
                    var remaining = values.First();
                    rateLimit.Remaining = int.Parse(remaining);
                }
            }
            public static string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                    return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }
        }

        public class RateLimitTracker
        {
            private int limit = 100;
            private DateTime? rateTimeout = DateTime.Now.AddMinutes(1);
            public int RateLimitRemaining { get; private set; }

            public void TrackRateLimit(int remaining)
            {
                RateLimitRemaining = remaining;
                if (rateTimeout is null || RateLimitRemaining == 99)
                {
                    rateTimeout = DateTime.Now.AddMinutes(1);
                }
                else if (RateLimitRemaining <= 2)
                {
                    var delta = rateTimeout.Value.Subtract(DateTime.Now).TotalMilliseconds;
                    Thread.Sleep((int)delta);
                    rateTimeout = DateTime.Now.AddMinutes(1);
                }

            }
            public void TrackRateLimit(string remaining)
            {
                if (int.TryParse(remaining, out int parsedLimit))
                {
                    TrackRateLimit(parsedLimit);
                }
            }
        }

        public partial class VexClientBase
        {
            protected string _baseUrl = "https://www.robotevents.com/api/v2";
            protected HttpClient _httpClient;
            protected System.Lazy<JsonSerializerSettings> _settings = null!;
            private RateLimitTracker _raterLimiter;
            protected bool useHttpClient = bool.Parse(bool.FalseString);

            public VexClientBase()
            {
                var client = new HttpClient();
                client.DefaultRequestHeaders.Accept.Add(
                    new MediaTypeWithQualityHeaderValue("application/json"));
                client.DefaultRequestHeaders.Add("Authorization", Authorization.BearerToken);
                _httpClient = client;
                _settings = new System.Lazy<JsonSerializerSettings>(CreateSerializerSettings);
                _raterLimiter = new RateLimitTracker();
            }

            protected JsonSerializerSettings CreateSerializerSettings()
            {
                var settings = new JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            }

            partial void UpdateJsonSerializerSettings(JsonSerializerSettings settings);

            public string BaseUrl
            {
                get { return _baseUrl; }
                set { _baseUrl = value; }
            }

            protected JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }



            public void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url) { }
            public void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder) { }
            public void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response) { }

            public bool ReadResponseAsString { get; set; }

            protected Task<ObjectResponseResult<T>> GetResult<T>(StringBuilder builder)
            {
                var client = new WebClient();
                var url = builder.ToString();

                client.Headers.Add("Authorization", Authorization.BearerToken);
                client.Headers.Add("Accept", "application/json");

                var responseText = client.DownloadString(url);

                _raterLimiter.TrackRateLimit(client.ResponseHeaders["x-ratelimit-remaining"] ?? "");

                var typedBody = JsonConvert.DeserializeObject<T>(responseText);
                var result = new ObjectResponseResult<T>(typedBody, responseText);
                var rateLimiter = result.Object as IRateLimit;
                if (rateLimiter != null)
                {
                    rateLimiter.RateLimit.Remaining = _raterLimiter.RateLimitRemaining;
                }
                return Task.FromResult(result);
            }

            protected async Task<ObjectResponseResult<T>> GetResultWithHttpClient<T>(
                StringBuilder urlBuilder,
                CancellationToken cancellationToken = default,
                bool disposeClient = false,
                bool disposeRequest = true
            )

            {
                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        PrepareRequest(client_, request_, urlBuilder);

                        var url_ = urlBuilder.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<T>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }


                                var ratedLimiter = objectResponse_.Object as IRateLimit;
                                if (ratedLimiter != null)
                                {
                                    ratedLimiter.RateLimit.ParseRateLimit(response_);
                                    _raterLimiter.TrackRateLimit(ratedLimiter.RateLimit.Remaining);
                                }
                                return objectResponse_;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(
                HttpResponseMessage response,
                IReadOnlyDictionary<string, IEnumerable<string>> headers,
                CancellationToken cancellationToken)
            {
                if (response == null || response.Content == null)
                {
                    return new ObjectResponseResult<T>(default(T), string.Empty);
                }

                if (ReadResponseAsString)
                {
                    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                    try
                    {
                        var typedBody = JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                        return new ObjectResponseResult<T>(typedBody, responseText);
                    }
                    catch (JsonException exception)
                    {
                        var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                    }
                }
                else
                {
                    try
                    {
                        using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                        using (var streamReader = new System.IO.StreamReader(responseStream))
                        using (var jsonTextReader = new JsonTextReader(streamReader))
                        {
                            var serializer = JsonSerializer.Create(JsonSerializerSettings);
                            var typedBody = serializer.Deserialize<T>(jsonTextReader);
                            return new ObjectResponseResult<T>(typedBody, string.Empty);
                        }
                    }
                    catch (JsonException exception)
                    {
                        var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                        throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                    }
                }
            }

            protected string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value == null)
                {
                    return "";
                }

                if (value is System.Enum)
                {
                    var name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value != null ? attribute.Value : name;
                            }
                        }

                        var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                        return converted == null ? string.Empty : converted;
                    }
                }
                else if (value is bool)
                {
                    return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value.GetType().IsArray)
                {
                    var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                    return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
                }

                var result = System.Convert.ToString(value, cultureInfo);
                return result == null ? "" : result;
            }

            protected struct ObjectResponseResult<T>
            {

                public ObjectResponseResult(T responseObject, string responseText)
                {
                    this.Object = responseObject;
                    this.Text = responseText;
                }

                public T Object { get; }

                public string Text { get; }
            }
        }


        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class EventClient : VexClientBase, IEventClient
        {


            public EventClient() : base() { }

            public EventClient(System.Net.Http.HttpClient httpClient)
            {
                _httpClient = httpClient;
            }


            public async Task<List<Event>> GetAllEventsAsync(IEnumerable<int> season, CancellationToken cancellationToken = default)
            {
                var events = new List<Event>();
                var page = 1;

                var eventResults = await GetEventsAsync(season: new[] { 173 }, page: page, per_page: 250, cancellationToken: cancellationToken);

                Console.WriteLine($"[{DateTime.Now}] Rate limit: {eventResults.RateLimit.Remaining} - Retrieved {eventResults.Meta.To} of {eventResults.Meta.Total}");
                while (eventResults.Meta.Current_page < eventResults.Meta.Last_page)
                {
                    events.AddRange(eventResults.Data);
                    eventResults = await GetEventsAsync(season: new[] { 173 }, page: ++page, per_page: 250, cancellationToken: cancellationToken);
                    Console.WriteLine($"[{DateTime.Now}] Rate limit: {eventResults.RateLimit.Remaining} - Retrieved {eventResults.Meta.To} of {eventResults.Meta.Total}");

                }
                events.AddRange(eventResults.Data);

                return events;
            }

            public async Task<List<MatchObj>> GetAllMatchesForEventAsync(int id, int division, CancellationToken cancellationToken = default)
            {
                var matches = new List<MatchObj>();

                var page = 1;
                var matchResults = await GetDivisionMatchesAsync(id, division, page: page, per_page: 250, cancellationToken: cancellationToken);
                Console.WriteLine($"[{DateTime.Now}] Rate limit: {matchResults.RateLimit.Remaining}");
                while (matchResults.Meta.Current_page < matchResults.Meta.Last_page)
                {
                    matches.AddRange(matchResults.Data);
                    matchResults = await GetDivisionMatchesAsync(id, division, page: ++page, per_page: 250, cancellationToken: cancellationToken);
                    if (matchResults.RateLimit.Remaining <= 1)
                    {
                        Console.WriteLine($"[{DateTime.Now}] Rate limit exceeded. Sleeping 1 minute.");
                        System.Threading.Thread.Sleep(1000 * 60);
                    }
                }
                matches.AddRange(matchResults.Data);
                return matches;
            }

            public async Task<List<Team>> GetAllTeamsForEventAsync(int eventId, CancellationToken cancellationToken = default)
            {
                var eventTeams = new List<Vex.Api.Team>();
                var page = 1;
                var teamResults = await GetTeamsAsync(eventId, page: page, cancellationToken: cancellationToken);
                Console.WriteLine($"[{DateTime.Now}] Rate limit: {teamResults.RateLimit.Remaining}");

                while (teamResults.Meta.Current_page < teamResults.Meta.Last_page)
                {
                    eventTeams.AddRange(teamResults.Data);
                    teamResults = await GetTeamsAsync(eventId, page: ++page, cancellationToken: cancellationToken);
                    if (teamResults.RateLimit.Remaining <= 1)
                    {
                        Console.WriteLine($"[{DateTime.Now}] Rate limit exceeded. Sleeping 1 minute.");
                        System.Threading.Thread.Sleep(1000 * 60);
                    }
                }
                eventTeams.AddRange(teamResults.Data);
                return eventTeams;
            }


            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Events
            /// </remarks>
            /// <param name="id">Filter by Event ID</param>
            /// <param name="sku">Filter by Event SKU</param>
            /// <param name="team">Filter by Teams that participated in the Event</param>
            /// <param name="season">Filter by the Season that the Event belonged to</param>
            /// <param name="start">Filter by the Start Date of the Event</param>
            /// <param name="end">Filter by the End Date of the Event</param>
            /// <param name="level">Filter by the Event Level</param>
            /// <param name="myEvents">Only show events that have at least one registered team associated with the authenticated user.</param>
            /// <param name="eventTypes">Filter by the Event Type</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedEvent> GetEventsAsync(
                IEnumerable<int> id = null,
                IEnumerable<string> sku = null,
                IEnumerable<int> team = null,
                IEnumerable<int> season = null,
                System.DateTimeOffset? start = null,
                System.DateTimeOffset? end = null,
                IEnumerable<Anonymous> level = null,
                bool? myEvents = null,
                IEnumerable<EventType> eventTypes = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events?");
                if (id != null)
                {
                    foreach (var item_ in id) { urlBuilder_.Append(System.Uri.EscapeDataString("id[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (sku != null)
                {
                    foreach (var item_ in sku) { urlBuilder_.Append(System.Uri.EscapeDataString("sku[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (season != null)
                {
                    foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (start != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(start.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (end != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(end.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (level != null)
                {
                    foreach (var item_ in level) { urlBuilder_.Append(System.Uri.EscapeDataString("level[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (myEvents != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("myEvents") + "=").Append(System.Uri.EscapeDataString(ConvertToString(myEvents, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (eventTypes != null)
                {
                    foreach (var item_ in eventTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("eventTypes[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }

                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;


                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedEvent>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedEvent>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a Single Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <returns>A single Event</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<Event> GetEventAsync(int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Event>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                return objectResponse_.Object;
                            }
                            else
                            if (status_ == 404)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                throw new ApiException<Error>("Specified Event not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Teams present at a given Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="number">Filter by Team Number</param>
            /// <param name="registered">Filter by whether the Team is Registered</param>
            /// <param name="grade">Filter by the Grade of the Team</param>
            /// <param name="country">Filter by the Country of the Team</param>
            /// <param name="myTeams">Only show teams associated with the authenticated user.</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>List of Teams</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedTeam> GetTeamsAsync(
                int id,
                IEnumerable<string> number = null,
                bool? registered = null,
                IEnumerable<Anonymous2> grade = null,
                IEnumerable<string> country = null,
                bool? myTeams = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}/teams?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (number != null)
                {
                    foreach (var item_ in number) { urlBuilder_.Append(System.Uri.EscapeDataString("number[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (registered != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("registered") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registered, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (grade != null)
                {
                    foreach (var item_ in grade) { urlBuilder_.Append(System.Uri.EscapeDataString("grade[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (country != null)
                {
                    foreach (var item_ in country) { urlBuilder_.Append(System.Uri.EscapeDataString("country[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (myTeams != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("myTeams") + "=").Append(System.Uri.EscapeDataString(ConvertToString(myTeams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;


                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedTeam>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedTeam>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Skills runs performed at a given Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="team">Filter by Team Number that performed the Skills run</param>
            /// <param name="type">Filter by Type of Skills run</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>A list of Skills</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedSkill> GetSkillsAsync(
                int id,
                IEnumerable<int> team = null,
                IEnumerable<Anonymous3> type = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}/skills?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (type != null)
                {
                    foreach (var item_ in type) { urlBuilder_.Append(System.Uri.EscapeDataString("type[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedSkill>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                objectResponse_.Object.RateLimit.ParseRateLimit(response_);
                                System.Threading.Thread.Sleep(60000 / objectResponse_.Object.RateLimit.Limit);
                                return objectResponse_.Object;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Awards at a given Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="team">Filter by Team Number that the Award was awarded to</param>
            /// <param name="winner">Filter by the Winner of the Award (can include people's names, etc.)</param>
            /// <returns>A list of Awards</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedAward> GetAwardsAsync(int id, IEnumerable<int> team = null, IEnumerable<string> winner = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}/awards?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (winner != null)
                {
                    foreach (var item_ in winner) { urlBuilder_.Append(System.Uri.EscapeDataString("winner[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                var client_ = _httpClient;
                var disposeClient_ = false;
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);

                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        var disposeResponse_ = true;
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = (int)response_.StatusCode;
                            if (status_ == 200)
                            {
                                var objectResponse_ = await ReadObjectResponseAsync<PaginatedAward>(response_, headers_, cancellationToken).ConfigureAwait(false);
                                if (objectResponse_.Object == null)
                                {
                                    throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                                }
                                objectResponse_.Object.RateLimit.ParseRateLimit(response_);
                                System.Threading.Thread.Sleep(60000 / objectResponse_.Object.RateLimit.Limit);
                                return objectResponse_.Object;
                            }
                            else
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (disposeResponse_)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (disposeClient_)
                        client_.Dispose();
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Matches for a single Division of an Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="div">The ID of the Division</param>
            /// <param name="team">Filter to only return Matches which involved given Teams</param>
            /// <param name="round">Filter by the Round of the Match.
            /// <br/>Some typical values are shown below:
            /// <br/>- 1 - Practice
            /// <br/>- 2 - Qualification
            /// <br/>- 3 - Quarter-Finals
            /// <br/>- 4 - Semi-Finals
            /// <br/>- 5 - Finals
            /// <br/>- 6 - Round of 16
            /// <br/>- etc.</param>
            /// <param name="instance">Filter by the Instance of the Match. This is used to describe which Quarter-Final match (for example) is being played</param>
            /// <param name="matchnum">Filter by the MatchNum of the Match. This is the actual Match "number", e.g. Qualification Match, or the individual match in a Best of 3</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>A list of Matches</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedMatch> GetDivisionMatchesAsync(
                int id,
                int div,
                IEnumerable<int> team = null,
                IEnumerable<int> round = null,
                IEnumerable<int> instance = null,
                IEnumerable<int> matchnum = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (div == null)
                    throw new System.ArgumentNullException("div");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}/divisions/{div}/matches?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                urlBuilder_.Replace("{div}", System.Uri.EscapeDataString(ConvertToString(div, System.Globalization.CultureInfo.InvariantCulture)));
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (round != null)
                {
                    foreach (var item_ in round) { urlBuilder_.Append(System.Uri.EscapeDataString("round[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (instance != null)
                {
                    foreach (var item_ in instance) { urlBuilder_.Append(System.Uri.EscapeDataString("instance[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (matchnum != null)
                {
                    foreach (var item_ in matchnum) { urlBuilder_.Append(System.Uri.EscapeDataString("matchnum[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;


                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedMatch>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedMatch>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Finalist Rankings for a single Division of an Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="div">The ID of the Division</param>
            /// <param name="team">Filter to only return Rankings which involve given Teams</param>
            /// <param name="rank">Filter by the Rank</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>A list of Rankings</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedRanking> GetDivisionFinalistRankingsAsync(
                int id,
                int div,
                IEnumerable<int> team = null,
                IEnumerable<int> rank = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (div == null)
                    throw new System.ArgumentNullException("div");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}/divisions/{div}/finalistRankings?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                urlBuilder_.Replace("{div}", System.Uri.EscapeDataString(ConvertToString(div, System.Globalization.CultureInfo.InvariantCulture)));
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (rank != null)
                {
                    foreach (var item_ in rank) { urlBuilder_.Append(System.Uri.EscapeDataString("rank[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedRanking>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedRanking>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Rankings for a single Division of an Event
            /// </remarks>
            /// <param name="id">The ID of the Event</param>
            /// <param name="div">The ID of the Division</param>
            /// <param name="team">Filter to only return Rankings which involve given Teams</param>
            /// <param name="rank">Filter by the Rank</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>A list of Rankings</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedRanking> GetDivisionRankingsAsync(
                int id,
                int div,
                IEnumerable<int> team = null,
                IEnumerable<int> rank = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                if (div == null)
                    throw new System.ArgumentNullException("div");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/events/{id}/divisions/{div}/rankings?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                urlBuilder_.Replace("{div}", System.Uri.EscapeDataString(ConvertToString(div, System.Globalization.CultureInfo.InvariantCulture)));
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (rank != null)
                {
                    foreach (var item_ in rank) { urlBuilder_.Append(System.Uri.EscapeDataString("rank[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedRanking>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedRanking>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }
        }


        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial interface ITeamClient
        {

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Teams
            /// </remarks>
            /// <param name="id">Filter by Team ID</param>
            /// <param name="number">Filter by Team Number</param>
            /// <param name="event">Filter by Events that Teams have attended</param>
            /// <param name="registered">Filter by whether or not the Team is Registered</param>
            /// <param name="program">Filter by the Program that the Team is part of</param>
            /// <param name="grade">Filter by the Grade of the Team</param>
            /// <param name="country">Filter by the Country of the Team</param>
            /// <param name="myTeams">Only show teams associated with the authenticated user.</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>List of Teams</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedTeam> GetTeamsAsync(
                IEnumerable<int> id = null,
                IEnumerable<string> number = null,
                IEnumerable<int> @event = null,
                bool? registered = null,
                IEnumerable<int> program = null,
                IEnumerable<GradeLevel> grade = null,
                IEnumerable<string> country = null,
                bool? myTeams = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a Single Team
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <returns>A single Team</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<Team> GetTeamAsync(int id, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Events that a given Team has attended
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="sku">Filter by Event SKU</param>
            /// <param name="season">Filter by the Season that the Event belonged to</param>
            /// <param name="start">Filter by the Start Date of the Event</param>
            /// <param name="end">Filter by the End Date of the Event</param>
            /// <param name="level">Filter by the Event Level</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedEvent> GetEventsAsync(int id, IEnumerable<string> sku = null, IEnumerable<int> season = null, System.DateTimeOffset? start = null, System.DateTimeOffset? end = null, IEnumerable<Anonymous5> level = null, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Matches that a given Team has played in
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event the Match was performed at</param>
            /// <param name="season">Filter by the Season during which the Match was played</param>
            /// <param name="round">Filter by the Round of the Match.
            /// <br/>Some typical values are shown below:
            /// <br/>- 1 - Practice
            /// <br/>- 2 - Qualification
            /// <br/>- 3 - Quarter-Finals
            /// <br/>- 4 - Semi-Finals
            /// <br/>- 5 - Finals
            /// <br/>- 6 - Round of 16
            /// <br/>- etc.</param>
            /// <param name="instance">Filter by the Instance of the Match. This is used to describe which Quarter-Final match (for example) is being played</param>
            /// <param name="matchnum">Filter by the MatchNum of the Match. This is the actual Match "number", e.g. Qualification Match, or the individual match in a Best of 3</param>
            /// <returns>List of Matches</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedMatch> GetMatchesAsync(int id, IEnumerable<int> @event = null, IEnumerable<int> season = null, IEnumerable<int> round = null, IEnumerable<int> instance = null, IEnumerable<int> matchnum = null, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Rankings for a given Team
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event in which the Ranking was achieved</param>
            /// <param name="rank">Filter by the Rank</param>
            /// <param name="season">Filter by the Season during which the Ranking was</param>
            /// <returns>List of Rankings</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedRanking> GetRankingsAsync(int id, IEnumerable<int> @event = null, IEnumerable<int> rank = null, IEnumerable<int> season = null, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Skills runs that a given Team has performed
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event at which the Skills run was performed</param>
            /// <param name="type">Filter by Type of Skills run</param>
            /// <param name="season">Filter by the Season during which the Skills run was performed</param>
            /// <returns>A list of Skills</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedSkill> GetSkillsAsync(int id, IEnumerable<int> @event = null, IEnumerable<Anonymous6> type = null, IEnumerable<int> season = null, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Awards that a given Team has received
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event at which the Award was given out</param>
            /// <param name="season">Filter by the Season in which the Award was given out</param>
            /// <returns>List of Awards</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedAward> GetAwardsAsync(int id, IEnumerable<int> @event = null, IEnumerable<int> season = null, CancellationToken cancellationToken = default(CancellationToken));

        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class TeamClient : VexClientBase, ITeamClient
        {

            public TeamClient() : this(ClientFactory.GetHttpClient()) { }

            public TeamClient(System.Net.Http.HttpClient httpClient)
            {
                _httpClient = httpClient;
            }


            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Teams
            /// </remarks>
            /// <param name="id">Filter by Team ID</param>
            /// <param name="number">Filter by Team Number</param>
            /// <param name="event">Filter by Events that Teams have attended</param>
            /// <param name="registered">Filter by whether or not the Team is Registered</param>
            /// <param name="program">Filter by the Program that the Team is part of</param>
            /// <param name="grade">Filter by the Grade of the Team</param>
            /// <param name="country">Filter by the Country of the Team</param>
            /// <param name="myTeams">Only show teams associated with the authenticated user.</param>
            /// <param name="page">Page number of results to retrieve.</param>
            /// <param name="per_page">Number of results per page</param>
            /// <returns>List of Teams</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedTeam> GetTeamsAsync(
                IEnumerable<int> id = null,
                IEnumerable<string> number = null,
                IEnumerable<int> @event = null,
                bool? registered = null,
                IEnumerable<int> program = null,
                IEnumerable<GradeLevel> grade = null,
                IEnumerable<string> country = null,
                bool? myTeams = null,
                int page = 1,
                int per_page = 250,
                CancellationToken cancellationToken = default(CancellationToken))
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams?");
                if (id != null)
                {
                    foreach (var item_ in id) { urlBuilder_.Append(System.Uri.EscapeDataString("id[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (number != null)
                {
                    foreach (var item_ in number) { urlBuilder_.Append(System.Uri.EscapeDataString("number[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (@event != null)
                {
                    foreach (var item_ in @event) { urlBuilder_.Append(System.Uri.EscapeDataString("event[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (registered != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("registered") + "=").Append(System.Uri.EscapeDataString(ConvertToString(registered, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (program != null)
                {
                    foreach (var item_ in program) { urlBuilder_.Append(System.Uri.EscapeDataString("program[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (grade != null)
                {
                    foreach (var item_ in grade) { urlBuilder_.Append(System.Uri.EscapeDataString("grade[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (country != null)
                {
                    foreach (var item_ in country) { urlBuilder_.Append(System.Uri.EscapeDataString("country[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (myTeams != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("myTeams") + "=").Append(System.Uri.EscapeDataString(ConvertToString(myTeams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                urlBuilder_.AddPaging(page, per_page);
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedTeam>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedTeam>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a Single Team
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <returns>A single Team</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<Team> GetTeamAsync(int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                if (!useHttpClient)
                {
                    var result = await GetResult<Team>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<Team>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Events that a given Team has attended
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="sku">Filter by Event SKU</param>
            /// <param name="season">Filter by the Season that the Event belonged to</param>
            /// <param name="start">Filter by the Start Date of the Event</param>
            /// <param name="end">Filter by the End Date of the Event</param>
            /// <param name="level">Filter by the Event Level</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedEvent> GetEventsAsync(int id, IEnumerable<string> sku = null, IEnumerable<int> season = null, System.DateTimeOffset? start = null, System.DateTimeOffset? end = null, IEnumerable<Anonymous5> level = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{id}/events?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (sku != null)
                {
                    foreach (var item_ in sku) { urlBuilder_.Append(System.Uri.EscapeDataString("sku[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (season != null)
                {
                    foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (start != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(start.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (end != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(end.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (level != null)
                {
                    foreach (var item_ in level) { urlBuilder_.Append(System.Uri.EscapeDataString("level[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedEvent>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedEvent>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Matches that a given Team has played in
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event the Match was performed at</param>
            /// <param name="season">Filter by the Season during which the Match was played</param>
            /// <param name="round">Filter by the Round of the Match.
            /// <br/>Some typical values are shown below:
            /// <br/>- 1 - Practice
            /// <br/>- 2 - Qualification
            /// <br/>- 3 - Quarter-Finals
            /// <br/>- 4 - Semi-Finals
            /// <br/>- 5 - Finals
            /// <br/>- 6 - Round of 16
            /// <br/>- etc.</param>
            /// <param name="instance">Filter by the Instance of the Match. This is used to describe which Quarter-Final match (for example) is being played</param>
            /// <param name="matchnum">Filter by the MatchNum of the Match. This is the actual Match "number", e.g. Qualification Match, or the individual match in a Best of 3</param>
            /// <returns>List of Matches</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedMatch> GetMatchesAsync(int id, IEnumerable<int> @event = null, IEnumerable<int> season = null, IEnumerable<int> round = null, IEnumerable<int> instance = null, IEnumerable<int> matchnum = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{id}/matches?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (@event != null)
                {
                    foreach (var item_ in @event) { urlBuilder_.Append(System.Uri.EscapeDataString("event[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (season != null)
                {
                    foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (round != null)
                {
                    foreach (var item_ in round) { urlBuilder_.Append(System.Uri.EscapeDataString("round[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (instance != null)
                {
                    foreach (var item_ in instance) { urlBuilder_.Append(System.Uri.EscapeDataString("instance[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (matchnum != null)
                {
                    foreach (var item_ in matchnum) { urlBuilder_.Append(System.Uri.EscapeDataString("matchnum[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedMatch>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedMatch>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Rankings for a given Team
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event in which the Ranking was achieved</param>
            /// <param name="rank">Filter by the Rank</param>
            /// <param name="season">Filter by the Season during which the Ranking was</param>
            /// <returns>List of Rankings</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedRanking> GetRankingsAsync(int id, IEnumerable<int> @event = null, IEnumerable<int> rank = null, IEnumerable<int> season = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{id}/rankings?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (@event != null)
                {
                    foreach (var item_ in @event) { urlBuilder_.Append(System.Uri.EscapeDataString("event[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (rank != null)
                {
                    foreach (var item_ in rank) { urlBuilder_.Append(System.Uri.EscapeDataString("rank[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (season != null)
                {
                    foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedRanking>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedRanking>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Skills runs that a given Team has performed
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event at which the Skills run was performed</param>
            /// <param name="type">Filter by Type of Skills run</param>
            /// <param name="season">Filter by the Season during which the Skills run was performed</param>
            /// <returns>A list of Skills</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedSkill> GetSkillsAsync(int id, IEnumerable<int> @event = null, IEnumerable<Anonymous6> type = null, IEnumerable<int> season = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{id}/skills?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (@event != null)
                {
                    foreach (var item_ in @event) { urlBuilder_.Append(System.Uri.EscapeDataString("event[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (type != null)
                {
                    foreach (var item_ in type) { urlBuilder_.Append(System.Uri.EscapeDataString("type[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (season != null)
                {
                    foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedSkill>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedSkill>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Awards that a given Team has received
            /// </remarks>
            /// <param name="id">The ID of the Team</param>
            /// <param name="event">Filter by the Event at which the Award was given out</param>
            /// <param name="season">Filter by the Season in which the Award was given out</param>
            /// <returns>List of Awards</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedAward> GetAwardsAsync(int id, IEnumerable<int> @event = null, IEnumerable<int> season = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/teams/{id}/awards?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (@event != null)
                {
                    foreach (var item_ in @event) { urlBuilder_.Append(System.Uri.EscapeDataString("event[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (season != null)
                {
                    foreach (var item_ in season) { urlBuilder_.Append(System.Uri.EscapeDataString("season[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedAward>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedAward>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial interface IProgramClient
        {

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Find a single Program by ID
            /// </remarks>
            /// <param name="id">The Program ID</param>
            /// <returns>Single Program</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<Program> GetProgramAsync(int id, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Programs
            /// </remarks>
            /// <param name="id">Filter by program ID</param>
            /// <returns>List of Programs</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedProgram> GetProgramsAsync(IEnumerable<int> id = null, CancellationToken cancellationToken = default(CancellationToken));

        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ProgramClient : VexClientBase, IProgramClient
        {
            public ProgramClient()
            {

            }

            public ProgramClient(System.Net.Http.HttpClient httpClient)
            {
                _httpClient = httpClient;
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Find a single Program by ID
            /// </remarks>
            /// <param name="id">The Program ID</param>
            /// <returns>Single Program</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<Program> GetProgramAsync(int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/programs/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                if (!useHttpClient)
                {
                    var result = await GetResult<Program>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<Program>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Programs
            /// </remarks>
            /// <param name="id">Filter by program ID</param>
            /// <returns>List of Programs</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedProgram> GetProgramsAsync(IEnumerable<int> id = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/programs?");
                if (id != null)
                {
                    foreach (var item_ in id) { urlBuilder_.Append(System.Uri.EscapeDataString("id[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedProgram>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedProgram>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial interface ISeasonClient
        {

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Seasons
            /// </remarks>
            /// <param name="id">Filter by Season ID</param>
            /// <param name="program">Filter by Program to which the Season belongs</param>
            /// <param name="team">Filter by seasons in which the specified teams were active</param>
            /// <param name="start">Filter by Start Date of the Season</param>
            /// <param name="end">Filter by End Date of the Season</param>
            /// <param name="active">Only include active Seasons</param>
            /// <returns>List of Seasons</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedSeason> GetSeasonsAsync(IEnumerable<int> id = null, IEnumerable<int> program = null, IEnumerable<int> team = null, System.DateTimeOffset? start = null, System.DateTimeOffset? end = null, bool? active = null, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a single Season
            /// </remarks>
            /// <param name="id">The Season ID</param>
            /// <returns>A single Season</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<Season> GetSeasonAsync(int id, CancellationToken cancellationToken = default(CancellationToken));

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Events for a given Season
            /// </remarks>
            /// <param name="id">The Season ID</param>
            /// <param name="sku">Filter by Event SKU</param>
            /// <param name="team">Filter by Teams that participated in the Event</param>
            /// <param name="start">Filter by the Start Date of the Event</param>
            /// <param name="end">Filter by the End Date of the Event</param>
            /// <param name="level">Filter by the Event Level</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            Task<PaginatedEvent> GetEventsAsync(int id, IEnumerable<string> sku = null, IEnumerable<int> team = null, System.DateTimeOffset? start = null, System.DateTimeOffset? end = null, IEnumerable<Anonymous7> level = null, CancellationToken cancellationToken = default(CancellationToken));

        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class SeasonClient : VexClientBase, ISeasonClient
        {

            public SeasonClient()
            {

            }

            public SeasonClient(System.Net.Http.HttpClient httpClient)
            {
                _httpClient = httpClient;

            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Seasons
            /// </remarks>
            /// <param name="id">Filter by Season ID</param>
            /// <param name="program">Filter by Program to which the Season belongs</param>
            /// <param name="team">Filter by seasons in which the specified teams were active</param>
            /// <param name="start">Filter by Start Date of the Season</param>
            /// <param name="end">Filter by End Date of the Season</param>
            /// <param name="active">Only include active Seasons</param>
            /// <returns>List of Seasons</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedSeason> GetSeasonsAsync(IEnumerable<int> id = null, IEnumerable<int> program = null, IEnumerable<int> team = null, System.DateTimeOffset? start = null, System.DateTimeOffset? end = null, bool? active = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/seasons?");
                if (id != null)
                {
                    foreach (var item_ in id) { urlBuilder_.Append(System.Uri.EscapeDataString("id[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (program != null)
                {
                    foreach (var item_ in program) { urlBuilder_.Append(System.Uri.EscapeDataString("program[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (start != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(start.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (end != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(end.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (active != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("active") + "=").Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedSeason>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedSeason>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a single Season
            /// </remarks>
            /// <param name="id">The Season ID</param>
            /// <returns>A single Season</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<Season> GetSeasonAsync(int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/seasons/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                if (!useHttpClient)
                {
                    var result = await GetResult<Season>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<Season>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            /// <remarks>
            /// Gets a List of Events for a given Season
            /// </remarks>
            /// <param name="id">The Season ID</param>
            /// <param name="sku">Filter by Event SKU</param>
            /// <param name="team">Filter by Teams that participated in the Event</param>
            /// <param name="start">Filter by the Start Date of the Event</param>
            /// <param name="end">Filter by the End Date of the Event</param>
            /// <param name="level">Filter by the Event Level</param>
            /// <returns>List of Events</returns>
            /// <exception cref="ApiException">A server side error occurred.</exception>
            public virtual async Task<PaginatedEvent> GetEventsAsync(int id, IEnumerable<string> sku = null, IEnumerable<int> team = null, System.DateTimeOffset? start = null, System.DateTimeOffset? end = null, IEnumerable<Anonymous7> level = null, CancellationToken cancellationToken = default(CancellationToken))
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/seasons/{id}/events?");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                if (sku != null)
                {
                    foreach (var item_ in sku) { urlBuilder_.Append(System.Uri.EscapeDataString("sku[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (team != null)
                {
                    foreach (var item_ in team) { urlBuilder_.Append(System.Uri.EscapeDataString("team[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                if (start != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("start") + "=").Append(System.Uri.EscapeDataString(start.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (end != null)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString("end") + "=").Append(System.Uri.EscapeDataString(end.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (level != null)
                {
                    foreach (var item_ in level) { urlBuilder_.Append(System.Uri.EscapeDataString("level[]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
                }
                urlBuilder_.Length--;

                if (!useHttpClient)
                {
                    var result = await GetResult<PaginatedEvent>(urlBuilder_);
                    return result.Object;
                }
                else
                {
                    var result = await GetResultWithHttpClient<PaginatedEvent>(urlBuilder_, cancellationToken);
                    return result.Object;
                }
            }

        }

    }

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603
}
