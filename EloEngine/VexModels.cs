using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
namespace EloEngine
{
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

    namespace Vex.Api
    {
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Event
        {
            [JsonProperty("id", Required = Required.Always)]
            public int Id { get; set; }

            [JsonProperty("sku", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
            public string Sku { get; set; }

            [JsonProperty("name", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
            public string Name { get; set; }

            [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
            public System.DateTimeOffset Start { get; set; }

            [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
            public System.DateTimeOffset End { get; set; }

            [JsonProperty("season", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public IdInfo Season { get; set; } = new IdInfo();

            [JsonProperty("program", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public IdInfo Program { get; set; } = new IdInfo();

            [JsonProperty("location", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public Location Location { get; set; } = new Location();

            [JsonProperty("divisions", NullValueHandling = NullValueHandling.Ignore)]
            public ICollection<Division> Divisions { get; set; }

            [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public EventLevel Level { get; set; }

            [JsonProperty("ongoing", NullValueHandling = NullValueHandling.Ignore)]
            public bool Ongoing { get; set; }

            [JsonProperty("awards_finalized", NullValueHandling = NullValueHandling.Ignore)]
            public bool Awards_finalized { get; set; }

            [JsonProperty("event_type", NullValueHandling = NullValueHandling.Include)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public EventType? Event_type { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Event FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Event>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum EventType
        {

            [System.Runtime.Serialization.EnumMember(Value = @"tournament")]
            Tournament = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"league")]
            League = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"workshop")]
            Workshop = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"virtual")]
            Virtual = 3,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Program
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public int Id { get; set; }

            [JsonProperty("abbr", NullValueHandling = NullValueHandling.Ignore)]
            public string Abbr { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Program FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Program>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum EventLevel
        {

            [System.Runtime.Serialization.EnumMember(Value = @"World")]
            World = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"National")]
            National = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"Regional")]
            Regional = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"State")]
            State = 3,

            [System.Runtime.Serialization.EnumMember(Value = @"Signature")]
            Signature = 4,

            [System.Runtime.Serialization.EnumMember(Value = @"Other")]
            Other = 5,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Location
        {
            [JsonProperty("venue", NullValueHandling = NullValueHandling.Ignore)]
            public string Venue { get; set; }

            [JsonProperty("address_1", NullValueHandling = NullValueHandling.Ignore)]
            public string Address_1 { get; set; }

            [JsonProperty("address_2", NullValueHandling = NullValueHandling.Ignore)]
            public string Address_2 { get; set; }

            [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
            public string City { get; set; }

            [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
            public string Region { get; set; }

            [JsonProperty("postcode", NullValueHandling = NullValueHandling.Ignore)]
            public string Postcode { get; set; }

            [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
            public string Country { get; set; }

            [JsonProperty("coordinates", NullValueHandling = NullValueHandling.Ignore)]
            public Coordinates Coordinates { get; set; }


            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Location FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Location>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Coordinates
        {
            [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
            public float Lat { get; set; }

            [JsonProperty("lon", NullValueHandling = NullValueHandling.Ignore)]
            public float Lon { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Coordinates FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Coordinates>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Division
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public int Id { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }

            [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
            public int Order { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Division FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Division>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Grade
        {

            [System.Runtime.Serialization.EnumMember(Value = @"College")]
            College = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"High School")]
            High_School = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"Middle School")]
            Middle_School = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"Elementary School")]
            Elementary_School = 3,

        }

        public class RankedTeam
        {
            public Team Team;
            public int Rank { get; set; }
            public int WorldRank { get; set; }
            public RankedTeam(Team team)
            {
                this.Team = team;
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Team
        {
            [JsonProperty("id", Required = Required.Always)]
            public int Id { get; set; }

            [JsonProperty("number", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
            public string Number { get; set; }

            [JsonProperty("team_name", NullValueHandling = NullValueHandling.Ignore)]
            public string Team_name { get; set; }

            [JsonProperty("robot_name", NullValueHandling = NullValueHandling.Ignore)]
            public string Robot_name { get; set; }

            [JsonProperty("organization", NullValueHandling = NullValueHandling.Ignore)]
            public string Organization { get; set; }

            [JsonProperty("location", NullValueHandling = NullValueHandling.Ignore)]
            public Location Location { get; set; }

            [JsonProperty("registered", NullValueHandling = NullValueHandling.Ignore)]
            public bool Registered { get; set; }

            [JsonProperty("program", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public IdInfo Program { get; set; } = new IdInfo();

            [JsonProperty("grade", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public Grade Grade { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            [JsonIgnore]
            private int? rating = null;
            [JsonIgnore]
            public int Rating
            {
                get
                {
                    if (rating != null)
                        return rating.Value;
                    if (AdditionalProperties.ContainsKey("rating"))
                        rating = int.Parse(AdditionalProperties["rating"]?.ToString() ?? "1200");
                    else
                        rating = 1200;
                    return rating.Value;
                }
                set
                {
                    AdditionalProperties["rating"] = rating = value;
                }
            }

            [JsonIgnore]
            private int? worldrank = null;
            [JsonIgnore]
            [JsonProperty("worldrank", NullValueHandling = NullValueHandling.Ignore)]
            public int WorldRank
            {
                get
                {
                    if (worldrank != null)
                        return worldrank.Value;
                    if (AdditionalProperties.ContainsKey("worldrank"))
                        worldrank = int.Parse(AdditionalProperties["worldrank"]?.ToString() ?? "0");
                    else
                        worldrank = 0;
                    return worldrank.Value;
                }
                set
                {
                    AdditionalProperties["worldrank"] = worldrank = value;
                }
            }

            [JsonIgnore]
            private CompetitionRecord? record = null;
            [JsonIgnore]
            [JsonProperty("record", NullValueHandling = NullValueHandling.Ignore)]
            public CompetitionRecord TeamRecord
            {
                get
                {
                    if (record != null)
                        return record;

                    if (!AdditionalProperties.ContainsKey("record"))
                        AdditionalProperties["record"] = record = new CompetitionRecord();

                    return record;
                }
                set
                {
                    AdditionalProperties["record"] = record = value;
                }
            }



            public static Team FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Team>(data, new JsonSerializerSettings());

            }

        }

        public class CompetitionRecord
        {
            public TeamRecord QualifierRecord { get; set; } = new();
            public TeamRecord EliminationRecord { get; set; } = new();

            public int W => QualifierRecord.W + EliminationRecord.W;
            public int L => QualifierRecord.L + EliminationRecord.L;
            public int T => QualifierRecord.T + EliminationRecord.T;
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class IdInfo
        {
            [JsonProperty("id", Required = Required.Always)]
            public int Id { get; set; }

            [JsonProperty("name", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
            public string Name { get; set; }

            [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
            public string Code { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static IdInfo FromJson(string data)
            {

                return JsonConvert.DeserializeObject<IdInfo>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class MatchObj
        {
            [JsonProperty("id", Required = Required.Always)]
            public int Id { get; set; }

            [JsonProperty("event", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public IdInfo Event { get; set; } = new IdInfo();

            [JsonProperty("division", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public IdInfo Division { get; set; } = new IdInfo();

            [JsonProperty("round", Required = Required.Always)]
            public int Round { get; set; }

            [JsonProperty("instance", Required = Required.Always)]
            public int Instance { get; set; }

            [JsonProperty("matchnum", Required = Required.Always)]
            public int Matchnum { get; set; }

            [JsonProperty("scheduled", NullValueHandling = NullValueHandling.Ignore)]
            public System.DateTimeOffset Scheduled { get; set; }

            [JsonProperty("started", NullValueHandling = NullValueHandling.Ignore)]
            public System.DateTimeOffset Started { get; set; }

            [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
            public string Field { get; set; }

            [JsonProperty("scored", Required = Required.Always)]
            public bool Scored { get; set; }

            [JsonProperty("name", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
            public string Name { get; set; }

            [JsonProperty("alliances", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public ICollection<Alliance> Alliances { get; set; } = new System.Collections.ObjectModel.Collection<Alliance>();

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static MatchObj FromJson(string data)
            {

                return JsonConvert.DeserializeObject<MatchObj>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Alliance
        {
            [JsonProperty("color", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public AllianceColor Color { get; set; }

            [JsonProperty("score", Required = Required.Always)]
            public int Score { get; set; }

            [JsonProperty("teams", Required = Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            public ICollection<AllianceTeam> Teams { get; set; } = new System.Collections.ObjectModel.Collection<AllianceTeam>();

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Alliance FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Alliance>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class AllianceTeam
        {
            [JsonProperty("team", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Team { get; set; }

            [JsonProperty("sitting", NullValueHandling = NullValueHandling.Ignore)]
            public bool Sitting { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }



            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static AllianceTeam FromJson(string data)
            {

                return JsonConvert.DeserializeObject<AllianceTeam>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Ranking
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public int Id { get; set; }

            [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Event { get; set; }

            [JsonProperty("division", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Division { get; set; }

            [JsonProperty("rank", NullValueHandling = NullValueHandling.Ignore)]
            public int Rank { get; set; }

            [JsonProperty("team", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Team { get; set; }

            [JsonProperty("wins", NullValueHandling = NullValueHandling.Ignore)]
            public int Wins { get; set; }

            [JsonProperty("losses", NullValueHandling = NullValueHandling.Ignore)]
            public int Losses { get; set; }

            [JsonProperty("ties", NullValueHandling = NullValueHandling.Ignore)]
            public int Ties { get; set; }

            [JsonProperty("wp", NullValueHandling = NullValueHandling.Ignore)]
            public int Wp { get; set; }

            [JsonProperty("ap", NullValueHandling = NullValueHandling.Ignore)]
            public int Ap { get; set; }

            [JsonProperty("sp", NullValueHandling = NullValueHandling.Ignore)]
            public int Sp { get; set; }

            [JsonProperty("high_score", NullValueHandling = NullValueHandling.Ignore)]
            public int High_score { get; set; }

            [JsonProperty("average_points", NullValueHandling = NullValueHandling.Ignore)]
            public double Average_points { get; set; }

            [JsonProperty("total_points", NullValueHandling = NullValueHandling.Ignore)]
            public int Total_points { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Ranking FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Ranking>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Skill
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public int Id { get; set; }

            [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Event { get; set; }

            [JsonProperty("team", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Team { get; set; }

            [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public SkillType Type { get; set; }

            [JsonProperty("season", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Season { get; set; }

            [JsonProperty("division", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Division { get; set; }

            [JsonProperty("rank", NullValueHandling = NullValueHandling.Ignore)]
            public int Rank { get; set; }

            [JsonProperty("score", NullValueHandling = NullValueHandling.Ignore)]
            public int Score { get; set; }

            [JsonProperty("attempts", NullValueHandling = NullValueHandling.Ignore)]
            public int Attempts { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Skill FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Skill>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum SkillType
        {

            [System.Runtime.Serialization.EnumMember(Value = @"driver")]
            Driver = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"programming")]
            Programming = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"package_delivery_time")]
            Package_delivery_time = 2,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Award
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public int Id { get; set; }

            [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Event { get; set; }

            [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
            public int Order { get; set; }

            [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
            public string Title { get; set; }

            [JsonProperty("qualifications", NullValueHandling = NullValueHandling.Ignore)]
            public ICollection<string> Qualifications { get; set; }

            /// <summary>
            /// Some awards are given out per tournament or division
            /// </summary>
            [JsonProperty("designation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public AwardDesignation? Designation { get; set; }

            [JsonProperty("classification", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
            [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
            public AwardClassification? Classification { get; set; }

            [JsonProperty("teamWinners", NullValueHandling = NullValueHandling.Ignore)]
            public ICollection<TeamAwardWinner> TeamWinners { get; set; }

            [JsonProperty("individualWinners", NullValueHandling = NullValueHandling.Ignore)]
            public ICollection<string> IndividualWinners { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Award FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Award>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class TeamAwardWinner
        {
            [JsonProperty("division", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Division { get; set; }

            [JsonProperty("team", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Team { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static TeamAwardWinner FromJson(string data)
            {

                return JsonConvert.DeserializeObject<TeamAwardWinner>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Season
        {
            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public int Id { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }

            [JsonProperty("program", NullValueHandling = NullValueHandling.Ignore)]
            public IdInfo Program { get; set; }

            [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
            public System.DateTimeOffset Start { get; set; }

            [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
            public System.DateTimeOffset End { get; set; }

            [JsonProperty("years_start", NullValueHandling = NullValueHandling.Ignore)]
            public int Years_start { get; set; }

            [JsonProperty("years_end", NullValueHandling = NullValueHandling.Ignore)]
            public int Years_end { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Season FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Season>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class Error
        {
            [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
            public int Code { get; set; }

            [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
            public string Message { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static Error FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Error>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PageMeta
        {
            [JsonProperty("current_page", NullValueHandling = NullValueHandling.Ignore)]
            public int Current_page { get; set; }

            [JsonProperty("first_page_url", NullValueHandling = NullValueHandling.Ignore)]
            public string First_page_url { get; set; }

            [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
            public int From { get; set; }

            [JsonProperty("last_page", NullValueHandling = NullValueHandling.Ignore)]
            public int Last_page { get; set; }

            [JsonProperty("last_page_url", NullValueHandling = NullValueHandling.Ignore)]
            public string Last_page_url { get; set; }

            [JsonProperty("next_page_url", NullValueHandling = NullValueHandling.Ignore)]
            public string Next_page_url { get; set; }

            [JsonProperty("path", NullValueHandling = NullValueHandling.Ignore)]
            public string Path { get; set; }

            [JsonProperty("per_page", NullValueHandling = NullValueHandling.Ignore)]
            public int Per_page { get; set; }

            [JsonProperty("prev_page_url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
            public string Prev_page_url { get; set; }

            [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
            public int To { get; set; }

            [JsonProperty("total", NullValueHandling = NullValueHandling.Ignore)]
            public int Total { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }
            public static PageMeta FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PageMeta>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedTeam : Paginated<Team>
        {
            public static PaginatedTeam FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedTeam>(data, new JsonSerializerSettings());

            }

        }

        public interface IRateLimit
        {
            RateLimit RateLimit { get; set; }
        }
        public class RateLimit
        {
            public int Limit = 100;
            public int Remaining;
        }

        public class Paginated<T> : IRateLimit
        {
            public RateLimit RateLimit { get; set; } = new RateLimit();
            [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
            public PageMeta Meta { get; set; }

            [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
            public ICollection<T> Data { get; set; }

            private IDictionary<string, object> _additionalProperties;

            [JsonExtensionData]
            public IDictionary<string, object> AdditionalProperties
            {
                get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
                set { _additionalProperties = value; }
            }

            public string ToJson()
            {

                return JsonConvert.SerializeObject(this, new JsonSerializerSettings());

            }

            public static Paginated<T> FromJson(string data)
            {

                return JsonConvert.DeserializeObject<Paginated<T>>(data, new JsonSerializerSettings());

            }

        }
        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedEvent : Paginated<Event>
        {
            public static PaginatedEvent FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedEvent>(data, new JsonSerializerSettings());

            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedAward : Paginated<Award>
        {
            public static PaginatedAward FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedAward>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedSeason : Paginated<Season>
        {
            public static PaginatedSeason FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedSeason>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedRanking : Paginated<Ranking>
        {

            public static PaginatedRanking FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedRanking>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedMatch : Paginated<MatchObj>
        {
            public static PaginatedMatch FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedMatch>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedSkill : Paginated<Skill>
        {
            public static PaginatedSkill FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedSkill>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class PaginatedProgram : Paginated<Program>
        {

            public static PaginatedProgram FromJson(string data)
            {

                return JsonConvert.DeserializeObject<PaginatedProgram>(data, new JsonSerializerSettings());

            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Anonymous
        {

            [System.Runtime.Serialization.EnumMember(Value = @"World")]
            World = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"National")]
            National = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"State")]
            State = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"Signature")]
            Signature = 3,

            [System.Runtime.Serialization.EnumMember(Value = @"Other")]
            Other = 4,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Anonymous2
        {

            [System.Runtime.Serialization.EnumMember(Value = @"College")]
            College = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"High School")]
            High_School = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"Middle School")]
            Middle_School = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"Elementary School")]
            Elementary_School = 3,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Anonymous3
        {

            [System.Runtime.Serialization.EnumMember(Value = @"driver")]
            Driver = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"programming")]
            Programming = 1,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum GradeLevel
        {

            [System.Runtime.Serialization.EnumMember(Value = @"College")]
            College = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"High School")]
            High_School = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"Middle School")]
            Middle_School = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"Elementary School")]
            Elementary_School = 3,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Anonymous5
        {

            [System.Runtime.Serialization.EnumMember(Value = @"World")]
            World = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"National")]
            National = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"State")]
            State = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"Signature")]
            Signature = 3,

            [System.Runtime.Serialization.EnumMember(Value = @"Other")]
            Other = 4,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Anonymous6
        {

            [System.Runtime.Serialization.EnumMember(Value = @"driver")]
            Driver = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"programming")]
            Programming = 1,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum Anonymous7
        {

            [System.Runtime.Serialization.EnumMember(Value = @"World")]
            World = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"National")]
            National = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"State")]
            State = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"Signature")]
            Signature = 3,

            [System.Runtime.Serialization.EnumMember(Value = @"Other")]
            Other = 4,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum AllianceColor
        {

            [System.Runtime.Serialization.EnumMember(Value = @"red")]
            Red = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"blue")]
            Blue = 1,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum AwardDesignation
        {

            [System.Runtime.Serialization.EnumMember(Value = @"tournament")]
            Tournament = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"division")]
            Division = 1,

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public enum AwardClassification
        {

            [System.Runtime.Serialization.EnumMember(Value = @"champion")]
            Champion = 0,

            [System.Runtime.Serialization.EnumMember(Value = @"finalist")]
            Finalist = 1,

            [System.Runtime.Serialization.EnumMember(Value = @"semifinalist")]
            Semifinalist = 2,

            [System.Runtime.Serialization.EnumMember(Value = @"quarterfinalist")]
            Quarterfinalist = 3,

        }



        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ApiException : System.Exception
        {
            public int StatusCode { get; private set; }

            public string Response { get; private set; }

            public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

            public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException)
                : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
            {
                StatusCode = statusCode;
                Response = response;
                Headers = headers;
            }

            public override string ToString()
            {
                return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
        public partial class ApiException<TResult> : ApiException
        {
            public TResult Result { get; private set; }

            public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException)
                : base(message, statusCode, response, headers, innerException)
            {
                Result = result;
            }
        }

    }
#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
}
